package com.example.spiel;

import javafx.animation.FillTransition;
import javafx.beans.binding.Bindings;
import javafx.geometry.Pos;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.util.Duration;

import java.util.List;

/**
 * The type Start menu ui.
 */
public class StartMenuUI extends StackPane {
    /**
     * The Game sounds.
     */
    private GameSounds gameSounds = new GameSounds();
    /**
     * The Line.
     */
    private Rectangle line;

    /**
     * The constant FONT_PATH.
     */
    private static final String FONT_PATH = "/Font/ocra.ttf";
    /**
     * The constant CONTROLS_PATH.
     */
    private static final String CONTROLS_PATH = "file:src/main/resources/Otherstuff/Steuerung.png";

    /**
     * Instantiates a new Start menu ui.
     */
    StartMenuUI() {
    }

    /**
     * Instantiates a new Start menu ui.
     *
     * @param name   the name
     * @param action the action
     */
//Erstellt die Buttons im Startmenue
    StartMenuUI(String name, Runnable action) {
        LinearGradient gradient = createGradient();
        Rectangle rectangle0 = new Rectangle(300, 40, gradient);
        Rectangle rectangle1 = new Rectangle(300, 40, Color.web("black", 0.2));

        FillTransition fillTransition = new FillTransition(Duration.seconds(0.33), rectangle1,
                Color.web("black", 0.2), Color.web("white", 0.3));
        fillTransition.setAutoReverse(true);
        fillTransition.setCycleCount(Integer.MAX_VALUE);

        line = new Rectangle(5, 40);
        line.widthProperty().bind(Bindings.when(hoverProperty()).then(8).otherwise(5));
        line.fillProperty().bind(Bindings.when(hoverProperty()).then(Color.AQUAMARINE).otherwise(Color.RED));
        Text text = new Text(name);

        text.setEffect(createGlowEffect(Color.WHITE, 5, 5));
        Font customFont = Font.loadFont(getClass().getResourceAsStream(FONT_PATH), 20);
        text.setFont(customFont);
        text.fillProperty().bind(Bindings.when(hoverProperty()).then(Color.WHITE).otherwise(Color.BLACK));

        setGlow(Color.RED);

        hoverProperty().addListener((o, oldValue, isHovering) -> {
            if (isHovering) {
                fillTransition.playFromStart();
                setGlow(Color.AQUAMARINE);
                gameSounds.playHoverSound();
            } else {
                fillTransition.stop();
                setGlow(Color.RED);
                rectangle1.setFill(Color.web("black", 0.2));
            }
        });

        setOnMouseClicked(e -> {
            gameSounds.playSelectedSound();
            action.run();
        });

        setOnMousePressed(e -> rectangle0.setFill(Color.SLATEGREY));
        setOnMouseReleased(e -> rectangle0.setFill(gradient));
        setAlignment(Pos.CENTER_LEFT);

        HBox box = new HBox(15, line, text);
        box.setAlignment(Pos.CENTER_LEFT);

        getChildren().addAll(rectangle0, rectangle1, box);
    }

    /**
     * Create gradient linear gradient.
     *
     * @return the linear gradient
     */
//Setzt die Button fArben fest
    private LinearGradient createGradient() {
        return new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,
                new Stop(0.1, Color.web ("white", 0.75)),
                new Stop(1.0, Color.web("black", 0.15))
        );
    }

    /**
     * Sets glow.
     *
     * @param color the color
     */
//Logik für das leuchten der Buttons im Startmenue
    private void setGlow(Color color) {
        if (line != null) {
            line.setEffect(null);
        }
        line.setEffect(createGlowEffect(color, 20, 20));
    }

    /**
     * Create glow effect drop shadow.
     *
     * @param color  the color
     * @param width  the width
     * @param height the height
     * @return the drop shadow
     */
//Logik für das leuchten der Buttons im Startmenue
    private DropShadow createGlowEffect(Color color, double width, double height) {
        DropShadow glow = new DropShadow();
        glow.setColor(color);
        glow.setWidth(width);
        glow.setHeight(height);
        return glow;
    }

    /**
     * Create help content.
     *
     * @param helpSubScene the help sub scene
     */
//Erstellt den Inhalt des "Hilfe" Tabs im Startmenue
    public void createHelpContent(StartSubScene helpSubScene) {
        ImageView controlView = new ImageView(new Image(CONTROLS_PATH));

        controlView.setLayoutX(100);
        controlView.setLayoutY(70);
        controlView.setFitWidth(648);
        controlView.setFitHeight(364.8);

        helpSubScene.getSubSceneRoot().getChildren().add(controlView);

        Text helpText = new Text(
                """
                        Malware found! ist ein Arcade-Spiel, bei dem du die Rolle eines\s
                        Verteidigers für die Firewall übernimmst und deinen Computer\s
                        vor gefährlichen Viren schätzen musst. Das Hauptziel des Spiels\s
                        besteht darin, den Mega Virus Boss zu besiegen, so lange wie\s
                        möglich zu überleben und eine möglichst hohe Punktzahl zu\s
                        erreichen. Du erhältst Punkte für das Zerstören von Viren und\s
                        kann durch das Sammeln von Power-Ups deine Schussgeschwindigkeit\s
                        und deine Bewegungsgeschwindigkeit erhöht."""
        );

        setStartTextCharacteristics(helpText, 20, 20, 390);
        helpSubScene.getSubSceneRoot().getChildren().add(helpText);
    }

    /**
     * Create score content.
     *
     * @param scoreSubScene the score sub scene
     */
//Erstellt den Inhalt des "Score" Tabs im Startmenue
    public void createScoreContent(StartSubScene scoreSubScene) {
        HighScoreManager highScoreManager = new HighScoreManager();

        List<Integer> highScores = highScoreManager.loadHighScores();

        StringBuilder highScoresBuilder = new StringBuilder("High Scores:\n");

        for (int i = 0; i < highScores.size(); i++) {
            highScoresBuilder.append((i + 1)).append(". ").append(highScores.get(i)).append("\n");
        }

        Text highScoresText = new Text();
        highScoresText.setText(highScoresBuilder.toString());
        setStartTextCharacteristics(highScoresText, 30, 20, 110);

        scoreSubScene.getSubSceneRoot().getChildren().add(highScoresText);
    }

    /**
     * Create credit content.
     *
     * @param creditsSubScene the credits sub scene
     */
//Erstellt den Inhalt des "Credit" Tabs im StartmenÃ¼
    public void createCreditContent(StartSubScene creditsSubScene) {
        Text creditText = new Text("Dieses Spiel wurde erstellt von Chi Cuong Nguyen");
        setStartTextCharacteristics(creditText, 20, 20, 110);
        creditsSubScene.getSubSceneRoot().getChildren().add(creditText);
    }

    /**
     * Sets start text characteristics.
     *
     * @param text      the text
     * @param fontSize  the font size
     * @param positionx the positionx
     * @param positiony the positiony
     */
//Bestimmt die Standardschrifteigenschaften und die Position
    void setStartTextCharacteristics(Text text, int fontSize, int positionx, int positiony) {
        text.setLayoutX(positionx);
        text.setLayoutY(positiony);
        Font customFont = Font.loadFont(getClass().getResourceAsStream(FONT_PATH), fontSize);
        text.setFont(customFont);
        text.setFill(Color.LIME);
        text.setVisible(true);
    }
}

