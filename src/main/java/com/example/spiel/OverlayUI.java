package com.example.spiel;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.geometry.Rectangle2D;
import javafx.scene.Cursor;
import javafx.scene.ImageCursor;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;

/**
 * The type Overlay ui.
 */
// Diese Klasse verwaltet die Benutzeroberflaeche des Spieloverlays.
public class OverlayUI {
    /**
     * The Game over text.
     */
    private Text gameOverText;
    /**
     * The Restart text.
     */
    private Text restartText;
    /**
     * The Score text.
     */
    private Text scoreText;
    /**
     * The Level text.
     */
    private Text levelText;
    /**
     * The Background root.
     */
    private Pane backgroundRoot;
    /**
     * The Root.
     */
    private Pane root;

    /**
     * The constant BACKGROUND_PATH.
     */
//Globale Variablen aller Pfade
    private static final String BACKGROUND_PATH = "src/main/resources/Background/background1.mp4";
    /**
     * The constant STARTBACKGROUND_PATH.
     */
    private static final String STARTBACKGROUND_PATH = "src/main/resources/Background/startbackground.mp4";
    /**
     * The constant CURSOR_PATH.
     */
    private static final String CURSOR_PATH = "file:src/main/resources/Assets/cursor.png";
    /**
     * The constant HIGHSCORES_PATH.
     */
    private static final String HIGHSCORES_PATH = "file:src/main/resources/Otherstuff/highscore.png";
    /**
     * The constant ICON_PATH.
     */
    private static final String ICON_PATH = "file:src/main/resources/Logo/gamelogo.jpg";

    /**
     * Instantiates a new Overlay ui.
     *
     * @param root           the root
     * @param backgroundRoot the background root
     */
//Konstruktor f端r die Hintergr端nde
    public OverlayUI(Pane root, Pane backgroundRoot) {
        // Initialisiere die Textelemente in der Spielschicht
        this.backgroundRoot = backgroundRoot;
        this.root = root;
        setText(root);
    }

    /**
     * Instantiates a new Overlay ui.
     */
    public OverlayUI() {
    }

    /**
     * Initialize window.
     *
     * @param stage the stage
     */
//Gesamte Logik rund um die Stage
    void initializeWindow(Stage stage) {

        // Setzt das Fenster-Icon fest
        Image icon = new Image(ICON_PATH);
        stage.getIcons().add(icon);

        // Das Spiel-Fenster maximieren und anzeigen
        stage.setMaximized(true);
        stage.setFullScreen(true);
        stage.setTitle("Malware found!");
    }

    /**
     * Add background.
     */
    public void addBackground() {
        initializeBackGrounds(BACKGROUND_PATH);
    }

    /**
     * Add start background.
     */
    public void addStartBackground() {
        initializeBackGrounds(STARTBACKGROUND_PATH);
    }

    /**
     * Initialize back grounds.
     *
     * @param path the path
     */
//Hintergrundlogik
    public void initializeBackGrounds(String path) {
        // Hintergrundvideo laden
        Screen primaryScreen = Screen.getPrimary();
        Rectangle2D screenBounds = primaryScreen.getVisualBounds();
        Media background = new Media(new File(path).toURI().toString());
        MediaPlayer mediaPlayer = new MediaPlayer(background);
        MediaView mediaView = new MediaView(mediaPlayer);

        // Das Video zur Hintergrundschicht hinzufuegen
        backgroundRoot.getChildren().add(mediaView);
        mediaPlayer.setAutoPlay(true);
        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);
        mediaView.setFitWidth(screenBounds.getWidth()+100);
        mediaView.setFitHeight(screenBounds.getHeight()+100);
        mediaView.toBack();
    }

    /**
     * Sets text.
     *
     * @param root the root
     */
//Initialisiert alle Textelemente
    public void setText(Pane root) {
        // "Game Over"-Text
        gameOverText = new Text(200, 480, "Der Virus ist in deinen PC eingedrungen");
        setGameTextCharacteristics(gameOverText, 70, false, root);

        // Neustartanweisungen
        restartText = new Text(400, 520, "'R' Dr端cken um ein neues Spiel anzufangen");
        setGameTextCharacteristics(restartText, 40, false, root);

        // Punktestand-Anzeige
        scoreText = new Text(10, 120, "Score: 0");
        setGameTextCharacteristics(scoreText, 40, true, root);

        // Level-Anzeige
        levelText = new Text(10, 80, "Level 1");
        setGameTextCharacteristics(levelText, 40, true, root);

        // Highscore-Anzeige
        HighScoreManager highScoreManager = new HighScoreManager();
        Text highScoreText = new Text(10, 40, "Highscore: " + highScoreManager.getHighestScore());
        setGameTextCharacteristics(highScoreText, 40, true, root);
    }

    /**
     * Sets game text characteristics.
     *
     * @param text     the text
     * @param fontSize the font size
     * @param visible  the visible
     * @param root     the root
     */
// Gemeinsame Eigenschaften der Texte im Spieloverlay
    void setGameTextCharacteristics(Text text, int fontSize, boolean visible, Pane root) {
        text.setVisible(visible);
        text.setFont(Font.font("Impact", FontWeight.BOLD, fontSize));
        text.setFill(Color.WHITE);
        root.getChildren().add(text);
    }

    /**
     * Create cursor view.
     *
     * @param scene the scene
     */
//Setzt die eigene Mauszeiger-Grafik ein
    public void createCursorView(Scene scene) {
        Cursor cursor = new ImageCursor(new Image(CURSOR_PATH));
        scene.setCursor(cursor);
    }

    /**
     * Display high score view.
     */
//Zeigt die Highscore Grafik an
    public void displayHighScoreView() {
        ImageView highScoreView = new ImageView(new Image(HIGHSCORES_PATH));
        highScoreView.toBack();
        highScoreView.setX(700);
        highScoreView.setY(50);
        root.getChildren().add(highScoreView);

        //Timeline, um die Grafik 3 Sekunden lang anzuzeigen
        Timeline timeline = new Timeline(
                new KeyFrame(Duration.seconds(3), e -> {
                    root.getChildren().remove(highScoreView);
                })
        );
        timeline.play();
    }

    /**
     * Sets score.
     *
     * @param score the score
     */
// Setzt den Punktestand in der Benutzeroberflaeche.
    public void setScore(int score) {
        scoreText.setText("Score: " + score);
    }

    /**
     * Sets level.
     *
     * @param level the level
     */
// Setzt das aktuelle Level in der Benutzeroberflaeche.
    public void setLevel(int level) {
        levelText.setText("Level " + level);
    }

    /**
     * Show game over text.
     *
     * @param show the show
     */
// Zeigt oder versteckt den "Game Over"-Text.
    public void showGameOverText(boolean show) {
        gameOverText.setVisible(show);
    }

    /**
     * Show restart text.
     *
     * @param show the show
     */
// Zeigt oder versteckt den Neustart-Text.
    public void showRestartText(boolean show) {
        restartText.setVisible(show);
    }

    /**
     * Is game over text visible boolean.
     *
     * @return the boolean
     */
// Pr端ft, ob der "Game Over"-Text sichtbar ist.
    public boolean isGameOverTextVisible() {
        return gameOverText.isVisible();
    }

}