package com.example.spiel;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * The type High score manager.
 */
//Diese Klasse kümmert sich um die Verwaltung des Highscores.
public class HighScoreManager {
    /**
     * The constant MAXHIGHSCORES.
     */
    private static final int MAXHIGHSCORES = 10; // Maximale Anzahl von Highscores, die gespeichert werden sollen
    /**
     * The High scores.
     */
    private List<Integer> highScores; // Liste zur Speicherung der Highscores
    /**
     * The constant HIGHSCORES_PATH.
     */
    private static final String HIGHSCORES_PATH = "src/main/resources/Otherstuff/highScoreFile"; // Pfad zur Highscore-Datei


    /**
     * Instantiates a new High score manager.
     */
    public HighScoreManager() {
        highScores = new ArrayList<>(); // Initialisierung der Highscore-Liste
        loadHighScores(); // Laden der Highscores aus der Datei
    }

    /**
     * Load high scores list.
     *
     * @return the list
     */
// Methode zum Laden der Highscores aus der Highscore-Datei
    public List<Integer> loadHighScores() {
        highScores.clear(); // Leeren der aktuellen Highscore-Liste
        try (BufferedReader reader = new BufferedReader(new FileReader(HIGHSCORES_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                highScores.add(Integer.parseInt(line)); // Hinzufügen der gelesenen Highscores zur Liste
            }
            Collections.sort(highScores, Collections.reverseOrder()); // Sortieren der Highscores in absteigender Reihenfolge
            highScores = highScores.subList(0, Math.min(MAXHIGHSCORES, highScores.size())); // Begrenzen der Anzahl der Highscores auf MAXHIGHSCORES
        } catch (IOException e) {
            e.printStackTrace();
        }
        return highScores; // Rückgabe der geladenen Highscores
    }

    /**
     * Save high scores.
     */
// Methode zum Speichern der Highscores in die Datei
    public void saveHighScores() {
        try (FileWriter writer = new FileWriter(HIGHSCORES_PATH, false)) {
            for (Integer score : highScores.subList(0, Math.min(MAXHIGHSCORES, highScores.size()))) {
                writer.write(score.toString() + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Add high score.
     *
     * @param score the score
     */
// Methode zum Hinzufügen eines neuen Highscores
    public void addHighScore(int score) {
        highScores.add(score); // Hinzufügen des neuen Highscores zur Liste
        Collections.sort(highScores, Collections.reverseOrder()); // Sortieren der Highscores in absteigender Reihenfolge

        if (highScores.size() > MAXHIGHSCORES) {
            highScores = highScores.subList(0, MAXHIGHSCORES); // Begrenzen der Anzahl der Highscores auf MAXHIGHSCORES
        }
    }

    /**
     * Gets highest score.
     *
     * @return the highest score
     */
// Ermittelt den höchsten Score
    public int getHighestScore() {
        // Highscore 0, wenn die Liste leer ist
        if (loadHighScores().size() == 0) {
            return 0;
        } else {
            // Höchster Score an erster Stelle durch Sort
            return loadHighScores().get(0);
        }
    }
}

