package com.example.spiel;

import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Pane;

/**
 * The type Game controls.
 */
//Diese Klasse k端mmert sich um die User-Inputs
public class GameControls {
    /**
     * The Root.
     */
    private Pane root;
    /**
     * The Scene.
     */
    private Scene scene;
    /**
     * The Overlay ui.
     */
    private OverlayUI overlayUI;
    /**
     * The Game sounds.
     */
    private GameSounds gameSounds;
    /**
     * The Game manager.
     */
    private GameManager gameManager;
    /**
     * The Game stats.
     */
    private GameStats gameStats;
    /**
     * The Game menu.
     */
    private GameMenu gameMenu;
    /**
     * The Entity ui.
     */
    private EntityUI entityUI;

    /**
     * Instantiates a new Game controls.
     *
     * @param root        the root
     * @param scene       the scene
     * @param overlayUI   the overlay ui
     * @param gameSounds  the game sounds
     * @param gameManager the game manager
     * @param gameStats   the game stats
     * @param gameMenu    the game menu
     * @param entityUI    the entity ui
     */
    GameControls(Pane root, Scene scene, OverlayUI overlayUI, GameSounds gameSounds,
                 GameManager gameManager, GameStats gameStats, GameMenu gameMenu, EntityUI entityUI) {
        this.root = root;
        this.scene = scene;
        this.overlayUI = overlayUI;
        this.gameSounds = gameSounds;
        this.gameManager = gameManager;
        this.gameStats = gameStats;
        this.gameMenu = gameMenu;
        this.entityUI = entityUI;
    }

    /**
     * Keys.
     */
//Diese Methode verarbeitet User-inputs
    void keys() {
        if (!gameStats.getDeathState()) {
            processMouseInputs();
            processKeyInputs();
        }
    }

    /**
     * Process mouse inputs.
     */
// Verarbeitet Maus-Inputs
    private void processMouseInputs() {
        scene.setOnMousePressed(event -> {
            if (event.isPrimaryButtonDown()) {
                gameManager.createAttack(event);
                gameManager.rotateImageView(event, entityUI.getAttackView());
            }
        });

        scene.setOnMouseMoved(event -> {
            gameManager.rotateImageView(event, entityUI.getPlayerView());
        });
    }

    /**
     * Process key inputs.
     */
// Verarbeitet Tastatur-Inputs
    private void processKeyInputs() {
        scene.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();

            // Startet das Spiel mit R neu, wenn man gestorben ist
            if (keyCode == KeyCode.R && overlayUI.isGameOverTextVisible()) {
                gameStats.resetGame();
            }

            // Pausiert das Spiel und zeigt das Men端 an, wenn die ESC-Taste gedr端ckt wird
            if (keyCode == KeyCode.P && !gameStats.getPaused() && !overlayUI.isGameOverTextVisible()) {
                pauseGame();
                // Setzt das Spiel fort beim zweiten Escape
            } else if (keyCode == KeyCode.P && gameStats.getPaused() && !overlayUI.isGameOverTextVisible()) {
                resumeGame();
            }
        });
    }

    /**
     * Pause game.
     */
// Pausiert das Spiel und zeigt das Men端
    private void pauseGame() {
        gameStats.setPaused(true);
        gameMenu.showMenu();
        gameSounds.pauseMusic();
    }

    /**
     * Resume game.
     */
// Setzt das Spiel fort
    private void resumeGame() {
        gameMenu.resumeGame();
    }
}