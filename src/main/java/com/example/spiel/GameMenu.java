package com.example.spiel;

import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.scene.layout.Pane;
import javafx.stage.Screen;
import javafx.util.Duration;

import java.net.MalformedURLException;

/**
 * The type Game menu.
 */
//Diese Klasse ist für die Logik des Pausenmenüs zuständig
public class GameMenu {
    /**
     * The Root.
     */
    private Pane root;
    /**
     * The Game manager.
     */
    private GameManager gameManager;
    /**
     * The Game stats.
     */
    private GameStats gameStats;

    /**
     * The Game sounds.
     */
    private GameSounds gameSounds;
    /**
     * The Start menu.
     */
    private StartMenu startMenu;

    /**
     * Instantiates a new Game menu.
     *
     * @param gameManager the game manager
     * @param gameStats   the game stats
     * @param gameSounds  the game sounds
     * @param startmenu   the startmenu
     */
    public GameMenu(GameManager gameManager, GameStats gameStats, GameSounds gameSounds, StartMenu startmenu) {
        this.gameManager = gameManager;
        this.gameStats = gameStats;
        this.gameSounds = gameSounds;
        this.startMenu = startmenu;

        root = new Pane();
        root.setStyle("-fx-background-color: rgba(0, 0, 0, 0.7);"); // Semi-transparenter Hintergrund für die Buttons

        // Erstellt Menü-Buttons
        Button newGameButton = new Button("Neues Spiel");
        Button startMenuButton = new Button("Hauptmenü");
        Button resumeGameButton = new Button("Zurueck");
        Button quitButton = new Button("Spiel beenden");

        //
        newGameButton.getStyleClass().add("btn");
        resumeGameButton.getStyleClass().add("btn");
        quitButton.getStyleClass().add("btn");
        startMenuButton.getStyleClass().add("btn");

        //Logik für das was passiert, wenn die Buttons gedrückt werden
        newGameButton.setOnAction(event -> startNewGame());
        resumeGameButton.setOnAction(event -> resumeGame());
        quitButton.setOnAction(event -> Platform.exit());
        startMenuButton.setOnAction(event -> backToStartMenu());

        //Erstellung des Buttons und Positionierung
        VBox menuButtons = new VBox(30);
        menuButtons.setAlignment(Pos.CENTER);
        menuButtons.getChildren().addAll(newGameButton, startMenuButton, resumeGameButton, quitButton);

        double screenWidth = Screen.getPrimary().getBounds().getWidth();
        double screenHeight = Screen.getPrimary().getBounds().getHeight();
        double menuWidth = menuButtons.getBoundsInLocal().getWidth();
        double menuHeight = menuButtons.getBoundsInLocal().getHeight();
        double menuX = ((screenWidth - menuWidth) / 2) - 150;
        double menuY = ((screenHeight - menuHeight) / 2) - 200;
        menuButtons.setLayoutX(menuX);
        menuButtons.setLayoutY(menuY);

        root.setMinSize(screenWidth, screenHeight);
        root.getChildren().add(menuButtons);
        root.setVisible(false);
        root.setPickOnBounds(false);
    }

    /**
     * Show menu.
     */
//Zeigt das Menü
    void showMenu() {
        root.setVisible(true);
        gameManager.stopTimer();
    }

    /**
     * Hide menu.
     */
//Schließt das Menü
    void hideMenu() {
        root.setVisible(false);
        gameManager.startTimer();
    }

    /**
     * Start new game.
     */
//Startet ein neues Spiel
    private void startNewGame() {
        gameStats.resetGame();
        gameStats.setPaused(false);
        hideMenu();
    }

    /**
     * Resume game.
     */
//Geht zurück zum vorherigen Spielstand
    void resumeGame() {
        hideMenu();
        gameSounds.resumeMusic();
        gameStats.setPaused(false);
    }

    /**
     * Back to start menu.
     */
//Geht zurück in das Startmenü
    //Spielt dabei einen Fade-Effekt ab
    void backToStartMenu() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(500), root);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);
        fadeOut.setOnFinished(event -> {
            try {
                startMenu.startMenu();
            } catch (MalformedURLException e) {
                throw new RuntimeException(e);
            }
            startMenu.getStage().setFullScreen(true);
        });

        fadeOut.play();
    }

    /**
     * Gets menu pane.
     *
     * @return the menu pane
     */
//Getter für das Menü Pane
    Pane getMenuPane() {
        return root;
    }
}
