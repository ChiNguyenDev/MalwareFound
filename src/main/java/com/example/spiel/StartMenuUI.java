package com.example.spiel;

import javafx.animation.FillTransition;
import javafx.beans.binding.Bindings;
import javafx.geometry.Pos;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.util.Duration;

public class StartMenuUI extends StackPane {
    private GameSounds gameSounds = new GameSounds();
    private Rectangle line;

    StartMenuUI(String name, Runnable action) {
        LinearGradient gradient = new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,
                new Stop(0.1, Color.web("white", 0.75)),
                new Stop(1.0, Color.web("black", 0.15))
        );
        Rectangle rectangle0 = new Rectangle(300, 40, gradient);
        Rectangle rectangle1 = new Rectangle(300, 40, Color.web("black", 0.2));

        FillTransition fillTransition = new FillTransition(Duration.seconds(0.33), rectangle1, Color.web("black", 0.2),
                Color.web("white", 0.3));

        fillTransition.setAutoReverse(true);
        fillTransition.setCycleCount(Integer.MAX_VALUE);

        line = new Rectangle(5, 40);
        line.widthProperty().bind(Bindings.when(hoverProperty()).then(8).otherwise(5));
        line.fillProperty().bind(Bindings.when(hoverProperty()).then(Color.AQUAMARINE).otherwise(Color.RED));
        Text text = new Text(name);

        // Erstellt einen Schatteneffekt für den Text
        DropShadow glow = new DropShadow();
        glow.setColor(Color.WHITE);
        glow.setWidth(5);
        glow.setHeight(5);
        text.setEffect(glow);

        // Implementierung der Ocra Schrift
        Font customFont = Font.loadFont(getClass().getResourceAsStream("/Font/ocra.ttf"), 20);
        text.setFont(customFont);
        text.fillProperty().bind(Bindings.when(hoverProperty()).then(Color.WHITE).otherwise(Color.BLACK));

        // Setzt den Leuchteffekt
        setGlow(Color.RED);

        // Event-Handler für Hover-Verhalten
        hoverProperty().addListener((o, oldValue, isHovering) -> {
            if (isHovering) {
                fillTransition.playFromStart();
                setGlow(Color.AQUAMARINE);
                gameSounds.playHoverSound();
            } else {
                fillTransition.stop();
                setGlow(Color.RED);
                rectangle1.setFill(Color.web("black", 0.2));
            }
        });

        // Event-Handler für Mausklick
        setOnMouseClicked(e -> {
            gameSounds.playSelectedSound();
            action.run();
        });

        // Event-Handler für Mausdruck und -freigabe
        setOnMousePressed(e -> rectangle0.setFill(Color.SLATEGREY));
        setOnMouseReleased(e -> rectangle0.setFill(gradient));
        setAlignment(Pos.CENTER_LEFT);

        HBox box = new HBox(15, line, text);
        box.setAlignment(Pos.CENTER_LEFT);

        getChildren().addAll(rectangle0, rectangle1, box);
    }

    // Setzt den Leuchteffekt für das schmale Rechteck
    void setGlow(Color color) {
        if (line != null) {
            line.setEffect(null);
        }
        DropShadow glow2 = new DropShadow();
        glow2.setColor(color);
        glow2.setWidth(20);
        glow2.setHeight(20);
        line.setEffect(glow2);
    }
}
