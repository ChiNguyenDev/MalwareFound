package com.example.spiel;

import javafx.geometry.Rectangle2D;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.stage.Screen;

import java.util.ArrayList;

// Diese Klasse enthÃ¤lt alle Informationen zur BenutzeroberflÃ¤che (UI) der Spielobjekte
public class EntityUI {
    private ImageView bossView;
    private ImageView playerView;
    private Pane root;
    private ImageView attackView;
    private ImageView buffView;
    private ImageView enemyView;
    private ArrayList<ImageView> attackList = new ArrayList<>();
    private ArrayList<ImageView> buffList = new ArrayList<>();
    private ArrayList<ImageView> enemies = new ArrayList<>();

    // Pfade zu den Bilddateien
    private static final String BUFF_IMAGE_PATH = "file:src/main/resources/Assets/buff.png";
    private static final String BOSS_IMAGE_PATH = "file:src/main/resources/Assets/boss.png";
    private static final String PLAYER_IMAGE_PATH = "file:src/main/resources/Assets/character.png";
    private static final String ATTACK_IMAGE_PATH = "file:src/main/resources/Assets/attack.png";
    private static final String ENEMY_IMAGE_PATH = "file:src/main/resources/Assets/enemy.png";

    // Konstruktor
    public EntityUI(Pane root) {
        this.root = root;
    }

    // Initialisiert die Ansicht fÃ¼r den Buff
    void createBuffView(double buffX, double buffY) {
        buffView = createImageView(BUFF_IMAGE_PATH, buffX, buffY);
        buffList.add(buffView);
    }

    // Initialisiert die Ansicht fÃ¼r den Boss
    void createBossView(double bossX, double bossY) {
        bossView = createImageView(BOSS_IMAGE_PATH, bossX, bossY);
    }

    // Initialisiert die Ansicht fÃ¼r den Spieler
    void createPlayerView() {
        playerView = createImageView(PLAYER_IMAGE_PATH, 200, 200);
    }

    // Initialisiert die Ansicht fÃ¼r den Angriff
    void createAttackView(double x, double y) {
        attackView = createImageView(ATTACK_IMAGE_PATH, x, y - 18);
        attackList.add(attackView);
    }

    // Initialisiert die Ansicht fÃ¼r den Gegner
    void createEnemyView(double enemyX, double enemyY) {
        enemyView = createImageView(ENEMY_IMAGE_PATH, enemyX, enemyY);
        enemies.add(enemyView);
    }

    // Begrenzt die Position des Spielers innerhalb des Bildschirms
    void setBounds(double deltaX, double deltaY) {
        Screen primaryScreen = Screen.getPrimary();
        Rectangle2D screenBounds = primaryScreen.getVisualBounds();
        double screenMinX = screenBounds.getMinX() - 70;
        double screenMaxX = screenBounds.getMaxX() - 185;
        double screenMinY = screenBounds.getMinY();
        double screenMaxY = screenBounds.getMaxY() - 140;
        double playerX = Math.min(Math.max(playerView.getX() + deltaX, screenMinX), screenMaxX);
        double playerY = Math.min(Math.max(playerView.getY() + deltaY, screenMinY), screenMaxY);
        playerView.setX(playerX);
        playerView.setY(playerY);
    }

    // Getter-Methoden fÃ¼r die verschiedenen Ansichten und Listen
    public ImageView getPlayerView() {
        return playerView;
    }

    public ImageView getBossView() {
        return bossView;
    }

    public ImageView getEnemyView() {
        return enemyView;
    }

    public ImageView getBuffView() {
        return buffView;
    }

    public ArrayList<ImageView> getAttackList() {
        return attackList;
    }

    public ImageView getAttackView() {
        return attackView;
    }

    public ArrayList<ImageView> getBuffList() {
        return buffList;
    }

    public ArrayList<ImageView> getEnemies() {
        return enemies;
    }

    // Hilfsmethode zum Erstellen einer ImageView mit bestimmtem Bildpfad und Position
    private ImageView createImageView(String imagePath, double x, double y) {
        ImageView imageView = new ImageView(new Image(imagePath));
        imageView.setX(x);
        imageView.setY(y);
        root.getChildren().add(imageView);
        return imageView;
    }
}

