package com.example.spiel;

import javafx.animation.FillTransition;
import javafx.animation.TranslateTransition;
import javafx.scene.SubScene;
import javafx.scene.image.Image;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;

/** Diese Klasse ist für die UI der SubScenes zuständig. SubScenes sind die Szenen,
    die im Startbildschirm auftauchen, wenn man auf ein Button, wie "Hilfe" drückt.
    In diesem Projekt werden diese SubScenes als "Linux Terminal" abgebildet */
public class StartSubScene extends SubScene {
    /**
     * The constant BACKGROUND_IMAGE.
     */
    private final static String BACKGROUND_IMAGE = "file:src/main/resources/Background/Terminal2.png";
    /**
     * The Is hidden.
     */
    private  boolean isHidden; // Gibt an, ob die Subszene ausgeblendet ist
    /**
     * The Sub scene root.
     */
    AnchorPane subSceneRoot;

    /**
     * Instantiates a new Start sub scene.
     */
    public StartSubScene() {
        super(new AnchorPane(), 832.26, 556.78);

        BackgroundImage image = new BackgroundImage(new Image(BACKGROUND_IMAGE, 832.26, 556.78, false, true), BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT, null);
        subSceneRoot = (AnchorPane) this.getRoot();
        subSceneRoot.setBackground(new Background(image));

        setLayoutX(1980);
        setLayoutY(100);

        isHidden =  true; // Die Subszene ist anfangs ausgeblendet
        createLinuxRectangle();
    }

    /**
     * Create linux rectangle.
     */
    //Diese Methode erstellt blinkendes grünes Rechteck für das "Linux Terminal"
    void createLinuxRectangle() {
        Rectangle rectangle = new Rectangle(11.5, 23, Color.web("green", 1));
        rectangle.setX(315);
        rectangle.setY(34.5);
        // Logik für den Blinkeffekt
        FillTransition fillTransition = new FillTransition(Duration.seconds(0.33), rectangle, Color.web("green", 1),
                Color.web("black", 1));
        fillTransition.setAutoReverse(true);
        fillTransition.setCycleCount(Integer.MAX_VALUE);
        fillTransition.playFromStart();

        subSceneRoot.getChildren().add(rectangle);
    }

    /**
     * Move sub scene.
     */
    // Diese Methode ist für die Einblendungsanimation zuständig
    public void moveSubScene() {
        TranslateTransition transition = new TranslateTransition();
        transition.setDuration(Duration.seconds(0.3));
        transition.setNode(this);
        if(isHidden) {
            transition.setToX(-1676); // Einblenden der Subszene
            isHidden = false;
        } else {
            transition.setToX(0); // Ausblenden der Subszene
            isHidden = true;
        }
        transition.play();
    }

    /**
     * Get sub scene root anchor pane.
     *
     * @return the anchor pane
     */
    public AnchorPane getSubSceneRoot(){
        return subSceneRoot;
    }
}