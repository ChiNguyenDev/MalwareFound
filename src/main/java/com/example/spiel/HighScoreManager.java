package com.example.spiel;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HighScoreManager {
    private static final int MAXHIGHSCORES = 10;
    private List<Integer> highScores;

    public HighScoreManager() {
        highScores = new ArrayList<>();
        loadHighScores(); // Load existing high scores when initializing
    }

    public List<Integer> loadHighScores() {
        highScores.clear(); // Clear the list to avoid duplicates
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/resources/highScoreFile"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                highScores.add(Integer.parseInt(line));
            }
            Collections.sort(highScores, Collections.reverseOrder()); // Sort the scores in descending order.
            highScores = highScores.subList(0, Math.min(MAXHIGHSCORES, highScores.size())); // Limit to top 10 scores.
        } catch (IOException e) {
            e.printStackTrace();
        }
        return highScores;
    }

    public void saveHighScores() {
        try (FileWriter writer = new FileWriter("src/main/resources/highScoreFile", false)) {
            for (Integer score : highScores.subList(0, Math.min(MAXHIGHSCORES, highScores.size()))) {
                writer.write(score.toString() + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void addHighScore(int score) {
        highScores.add(score);
        Collections.sort(highScores, Collections.reverseOrder());

        if (highScores.size() > MAXHIGHSCORES) {
            highScores = highScores.subList(0, MAXHIGHSCORES);
        }
    }

    // Ermittelt den höchsten Score
    public int getHighestScore() {
        // Highscore 0, wenn die Liste leer ist
        if (loadHighScores().size() == 0) {
            return 0;
        } else {
            // Höchster Score an erster Stelle durch Sort
            return loadHighScores().get(0);
        }
    }
}
