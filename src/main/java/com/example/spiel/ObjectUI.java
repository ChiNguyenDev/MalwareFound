package com.example.spiel;

import javafx.geometry.Rectangle2D;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Screen;

import java.util.ArrayList;

//Diese Klasse enthÃ¤lt alle Information der UI von den Spielobjekten
public class ObjectUI {
    private ImageView bossView;
    private ImageView playerView;
    private Pane root;
    private ImageView attackView;
    private ImageView buffView;
    private ImageView enemyView;
    private ArrayList<ImageView> attackList = new ArrayList();
    private ArrayList<ImageView> buffList = new ArrayList<>();
    private ArrayList<ImageView> enemies = new ArrayList<>();

    ObjectUI(Pane root) {
        this.root = root;
    }

    // Initialisiert den Buff
    void createBuffView(double buffX, double buffY) {
        buffView = new ImageView(new Image("file:src/main/resources/Assets/buff.png"));
        buffList.add(buffView);
        buffView.setX(buffX);
        buffView.setY(buffY);
        root.getChildren().add(buffView);
    }

    // Initialisiert, setzt die Position des Bosses
    void createBossView(double bossX, double bossY) {
        bossView = new ImageView(new Image("file:src/main/resources/Assets/boss.png"));
        bossView.setX(bossX);
        bossView.setY(bossY);
        root.getChildren().add(bossView);
    }

    // Initialisiert, setzt die Position des Spielers
    void createPlayerView() {
        playerView = new ImageView(new Image("file:src/main/resources/Assets/character.png"));
        playerView.setX(200);
        playerView.setY(200);
        root.getChildren().add(playerView);
    }

    void createAttackView(double x, double y) {
        attackView = new ImageView(new Image("file:src/main/resources/Assets/attack.png"));
        attackView.setX(x);
        attackView.setY(y - 18);
        attackList.add(attackView);
        root.getChildren().add(attackView);
    }

    // Initialisiert, setzt die Position des Gegners
    void createEnemyView(double enemyX, double enemyY) {
        enemyView = new ImageView(new Image("file:src/main/resources/Assets/enemy.png"));
        enemyView.setX(enemyX);
        enemyView.setY(enemyY);
        root.getChildren().add(enemyView);
        enemies.add(enemyView);
    }

    // Sorgt dafuer, dass der Spieler im Bildschirm bleibt
    void setBounds(double deltaX, double deltaY) {
        Screen primaryScreen = Screen.getPrimary();
        //Stellt die Grenzen des Bildschirms dar
        Rectangle2D screenBounds = primaryScreen.getVisualBounds();

        //Sorgt dafuer, dass der Spieler im Bildschirm bleibt
        double screenMinX = screenBounds.getMinX() - 70;
        double screenMaxX = screenBounds.getMaxX() - 185;
        double screenMinY = screenBounds.getMinY();
        double screenMaxY = screenBounds.getMaxY() - 140;

        //Errechnet die Position
        double playerX = Math.min(Math.max(playerView.getX() + deltaX, screenMinX), screenMaxX);
        double playerY = Math.min(Math.max(playerView.getY() + deltaY, screenMinY), screenMaxY);

        //Updated den Standort des Spielers
        playerView.setX(playerX);
        playerView.setY(playerY);
    }

    public ImageView getPlayerView() {
        return playerView;
    }

    public ImageView getBossView() {
        return bossView;
    }

    public ImageView getEnemyView() {
        return enemyView;
    }

    public ImageView getBuffView() {
        return buffView;
    }

    public ArrayList<ImageView> getAttackList() {
        return attackList;
    }

    public ImageView getAttackView() {
        return attackView;
    }

    public ArrayList<ImageView> getBuffList() {
        return buffList;
    }

    public ArrayList<ImageView> getEnemies() {
        return enemies;
    }
}
