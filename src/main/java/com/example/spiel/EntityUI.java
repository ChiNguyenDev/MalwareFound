package com.example.spiel;

import javafx.geometry.Rectangle2D;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.stage.Screen;

import java.util.ArrayList;

/**
 * The type Entity ui.
 */
// Diese Klasse enthält alle Informationen zur Benutzeroberfläche (UI) der Spielobjekte
public class EntityUI {
    /**
     * The Boss view.
     */
    private ImageView bossView;
    /**
     * The Player view.
     */
    private ImageView playerView;
    /**
     * The Root.
     */
    private Pane root;
    /**
     * The Attack view.
     */
    private ImageView attackView;
    /**
     * The Buff view.
     */
    private ImageView buffView;
    /**
     * The Enemy view.
     */
    private ImageView enemyView;
    /**
     * The Attack list.
     */
    private ArrayList<ImageView> attackList = new ArrayList<>();
    /**
     * The Buff list.
     */
    private ArrayList<ImageView> buffList = new ArrayList<>();
    /**
     * The Enemies.
     */
    private ArrayList<ImageView> enemies = new ArrayList<>();

    /**
     * The constant BUFF_IMAGE_PATH.
     */
// Pfade zu den Bilddateien
    private static final String BUFF_IMAGE_PATH = "file:src/main/resources/Assets/buff.png";
    /**
     * The constant BOSS_IMAGE_PATH.
     */
    private static final String BOSS_IMAGE_PATH = "file:src/main/resources/Assets/boss.png";
    /**
     * The constant PLAYER_IMAGE_PATH.
     */
    private static final String PLAYER_IMAGE_PATH = "file:src/main/resources/Assets/character.png";
    /**
     * The constant ATTACK_IMAGE_PATH.
     */
    private static final String ATTACK_IMAGE_PATH = "file:src/main/resources/Assets/attack.png";
    /**
     * The constant ATTACK_IMAGE_PATH2.
     */
    private static final String ATTACK_IMAGE_PATH2 = "file:src/main/resources/Assets/attack2.png";
    /**
     * The constant ENEMY_IMAGE_PATH.
     */
    private static final String ENEMY_IMAGE_PATH = "file:src/main/resources/Assets/enemy.png";

    /**
     * Instantiates a new Entity ui.
     *
     * @param root the root
     */
// Konstruktor
    public EntityUI(Pane root) {
        this.root = root;
    }

    /**
     * Create buff view.
     *
     * @param buffX the buff x
     * @param buffY the buff y
     */
// Initialisiert die Ansicht für den Buff
    void createBuffView(double buffX, double buffY) {
        buffView = createImageView(BUFF_IMAGE_PATH, buffX, buffY);
        buffList.add(buffView);
    }

    /**
     * Create boss view.
     *
     * @param bossX the boss x
     * @param bossY the boss y
     */
// Initialisiert die Ansicht für den Boss
    void createBossView(double bossX, double bossY) {
        bossView = createImageView(BOSS_IMAGE_PATH, bossX, bossY);
    }

    /**
     * Create player view.
     */
// Initialisiert die Ansicht für den Spieler
    void createPlayerView() {
        playerView = createImageView(PLAYER_IMAGE_PATH, 200, 200);
    }

    /**
     * Create attack view.
     *
     * @param x      the x
     * @param y      the y
     * @param paused the paused
     */
// Initialisiert die Ansicht für den Angriff
    void createAttackView(double x, double y, boolean paused) {
        attackView = createImageView(getAttackImagePath(paused), x, y - 18);
        attackList.add(attackView);
    }

    /**
     * Create enemy view.
     *
     * @param enemyX the enemy x
     * @param enemyY the enemy y
     */
// Initialisiert die Ansicht für den Gegner
    void createEnemyView(double enemyX, double enemyY) {
        enemyView = createImageView(ENEMY_IMAGE_PATH, enemyX, enemyY);
        enemies.add(enemyView);
    }

    /**
     * Sets bounds.
     *
     * @param deltaX the delta x
     * @param deltaY the delta y
     */
// Begrenzt die Position des Spielers innerhalb des Bildschirms
    void setBounds(double deltaX, double deltaY) {
        Screen primaryScreen = Screen.getPrimary();
        Rectangle2D screenBounds = primaryScreen.getVisualBounds();
        double screenMinX = screenBounds.getMinX() - 70;
        double screenMaxX = screenBounds.getMaxX() - 100;
        double screenMinY = screenBounds.getMinY();
        double screenMaxY = screenBounds.getMaxY() - 90;
        double playerX = Math.min(Math.max(playerView.getX() + deltaX, screenMinX), screenMaxX);
        double playerY = Math.min(Math.max(playerView.getY() + deltaY, screenMinY), screenMaxY);
        playerView.setX(playerX);
        playerView.setY(playerY);
    }

    /**
     * Gets player view.
     *
     * @return the player view
     */
// Getter-Methoden für die verschiedenen Ansichten und Listen
    public ImageView getPlayerView() {
        return playerView;
    }

    /**
     * Gets boss view.
     *
     * @return the boss view
     */
    public ImageView getBossView() {
        return bossView;
    }

    /**
     * Gets enemy view.
     *
     * @return the enemy view
     */
    public ImageView getEnemyView() {
        return enemyView;
    }

    /**
     * Gets buff view.
     *
     * @return the buff view
     */
    public ImageView getBuffView() {
        return buffView;
    }

    /**
     * Gets attack list.
     *
     * @return the attack list
     */
    public ArrayList<ImageView> getAttackList() {
        return attackList;
    }

    /**
     * Gets attack view.
     *
     * @return the attack view
     */
    public ImageView getAttackView() {
        return attackView;
    }

    /**
     * Gets buff list.
     *
     * @return the buff list
     */
    public ArrayList<ImageView> getBuffList() {
        return buffList;
    }

    /**
     * Gets enemies.
     *
     * @return the enemies
     */
    public ArrayList<ImageView> getEnemies() {
        return enemies;
    }

    /**
     * Create image view image view.
     *
     * @param imagePath the image path
     * @param x         the x
     * @param y         the y
     * @return the image view
     */
// Hilfsmethode zum Erstellen einer ImageView mit bestimmtem Bildpfad und Position
    private ImageView createImageView(String imagePath, double x, double y) {
        ImageView imageView = new ImageView(new Image(imagePath));
        imageView.setX(x);
        imageView.setY(y);
        root.getChildren().add(imageView);
        return imageView;
    }

    /**
     * Gets attack image path.
     *
     * @param paused the paused
     * @return the attack image path
     */
//Easter egg: wenn pausiert, dann kann man einen Spezielangriff machen
    public String getAttackImagePath(boolean paused) {
        if(paused) {
            return ATTACK_IMAGE_PATH2;
        } else {
            return ATTACK_IMAGE_PATH;
        }
    }
}

